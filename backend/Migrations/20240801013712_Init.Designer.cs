// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240801013712_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f1f8a13-7234-4d2e-8818-ec3372b9e297"),
                            AdminLogin = "admin",
                            RequestId = new Guid("793a4459-5027-4387-bec4-9e394e632d9a"),
                            Score = 95.5f,
                            VerificationDatetime = new DateTime(2024, 8, 1, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8756)
                        },
                        new
                        {
                            Id = new Guid("fdaf067f-4ecb-4090-814a-7c8e34342182"),
                            AdminLogin = "admin",
                            RequestId = new Guid("2e754ad1-58a6-4d4c-b821-923c230973ba"),
                            Score = 88f,
                            VerificationDatetime = new DateTime(2024, 8, 1, 0, 37, 12, 109, DateTimeKind.Utc).AddTicks(8760)
                        },
                        new
                        {
                            Id = new Guid("f2fae233-6521-413b-acf4-c199fbfe9011"),
                            AdminLogin = "admin",
                            RequestId = new Guid("7b14ca69-5352-471c-9f65-b9fd655c5b07"),
                            Score = 92.3f,
                            VerificationDatetime = new DateTime(2024, 7, 31, 23, 37, 12, 109, DateTimeKind.Utc).AddTicks(8768)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be05aabd-8489-40e4-b8f8-30c7030e3500"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 8, 1, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8803),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = new Guid("49dbe9e4-9448-4633-b20c-d0d0740186d0"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 8, 1, 0, 37, 12, 109, DateTimeKind.Utc).AddTicks(8809),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = new Guid("a08c574b-ea04-439c-8dc2-a8a8d269894b"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 7, 31, 23, 37, 12, 109, DateTimeKind.Utc).AddTicks(8812),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5603c74-14b4-4504-976f-ed98044b221b"),
                            Datetime = new DateTime(2024, 8, 1, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8853),
                            RequestId = new Guid("793a4459-5027-4387-bec4-9e394e632d9a"),
                            Text = "This is a sample comment 1."
                        },
                        new
                        {
                            Id = new Guid("b12da4cd-6990-41c5-bd62-dc8c78b294d9"),
                            Datetime = new DateTime(2024, 8, 1, 0, 37, 12, 109, DateTimeKind.Utc).AddTicks(8856),
                            RequestId = new Guid("2e754ad1-58a6-4d4c-b821-923c230973ba"),
                            Text = "This is a sample comment 2."
                        },
                        new
                        {
                            Id = new Guid("76762e47-63e0-403d-af9f-0fbf508a7a86"),
                            Datetime = new DateTime(2024, 7, 31, 23, 37, 12, 109, DateTimeKind.Utc).AddTicks(8860),
                            RequestId = new Guid("7b14ca69-5352-471c-9f65-b9fd655c5b07"),
                            Text = "This is a sample comment 3."
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("FileName");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            FileName = "a167d1ab-afe9-434d-9f2d-bafc34f1e085",
                            RequestId = new Guid("793a4459-5027-4387-bec4-9e394e632d9a")
                        },
                        new
                        {
                            FileName = "642b33aa-4696-4578-9fe3-a7e4affbf441",
                            RequestId = new Guid("2e754ad1-58a6-4d4c-b821-923c230973ba")
                        },
                        new
                        {
                            FileName = "72ae54df-3dee-4d56-932c-fe8fe1768dfa",
                            RequestId = new Guid("7b14ca69-5352-471c-9f65-b9fd655c5b07")
                        },
                        new
                        {
                            FileName = "a92094d9-a3da-4e4b-b5ac-30a2d5e9ecec",
                            RequestId = new Guid("318fd119-df20-4e3d-86dc-e75f3ba95440")
                        });
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "Administrator",
                            Password = "$2a$11$QBOwTM/1G3zIqQBll7vQDel21tMOmMngs20z0bxrVLEqxyY3tHT02",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 31, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8374),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User One",
                            Password = "$2a$11$b63c2UhfmVGeeUWTnHlas.bk32AEQffYtnGdcX.NT0vzlNCLdZZVm",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 31, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8381),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User Two",
                            Password = "$2a$11$PW7Dapz13EKI/xGqXjK.Y.DJgkGU39nz79UQyUr6bc4I1UNoUJCey",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 31, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8389),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User Three",
                            Password = "$2a$11$ACFe85jXeKSHr7m3uycOsu4QN9/FbLb/YgTQ/v7UlR22DvoSX5gbW",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 31, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8440),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("793a4459-5027-4387-bec4-9e394e632d9a"),
                            DateTime = new DateTime(2024, 8, 1, 1, 37, 12, 109, DateTimeKind.Utc).AddTicks(8690),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            OwnerLogin = "user1",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("2e754ad1-58a6-4d4c-b821-923c230973ba"),
                            DateTime = new DateTime(2024, 7, 31, 23, 37, 12, 109, DateTimeKind.Utc).AddTicks(8713),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            OwnerLogin = "user2",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("7b14ca69-5352-471c-9f65-b9fd655c5b07"),
                            DateTime = new DateTime(2024, 7, 31, 21, 37, 12, 109, DateTimeKind.Utc).AddTicks(8717),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            OwnerLogin = "user2",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("318fd119-df20-4e3d-86dc-e75f3ba95440"),
                            DateTime = new DateTime(2024, 7, 31, 21, 37, 12, 109, DateTimeKind.Utc).AddTicks(8720),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            OwnerLogin = "user3",
                            Status = "InProgress"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
