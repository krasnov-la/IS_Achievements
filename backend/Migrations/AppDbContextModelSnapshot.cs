// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("VerificationDatetime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.HasIndex("RequestId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2100)
                        .HasColumnType("character varying(2100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdminLogin");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cab54aa-b430-4c4b-81b7-102c7a04482b"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 7, 17, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9583),
                            Link = "http://example.com/activity1",
                            Name = "Sample Activity 1",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = new Guid("58ade9e3-d6fa-4748-979e-b02958c5d08b"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 7, 17, 3, 56, 49, 752, DateTimeKind.Utc).AddTicks(9592),
                            Link = "http://example.com/activity2",
                            Name = "Sample Activity 2",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            Id = new Guid("e715aaff-b3a5-45f8-b3a7-7b6e28a3b8af"),
                            AdminLogin = "admin",
                            Datetime = new DateTime(2024, 7, 17, 2, 56, 49, 752, DateTimeKind.Utc).AddTicks(9603),
                            Link = "http://example.com/activity3",
                            Name = "Sample Activity 3",
                            Preview = "00000000-0000-0000-0000-000000000000"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("FileName");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RefreshExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Login = "admin",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "Administrator",
                            Password = "$2a$11$QBOwTM/1G3zIqQBll7vQDel21tMOmMngs20z0bxrVLEqxyY3tHT02",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 16, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9116),
                            Role = "Admin"
                        },
                        new
                        {
                            Login = "user1",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User One",
                            Password = "$2a$11$b63c2UhfmVGeeUWTnHlas.bk32AEQffYtnGdcX.NT0vzlNCLdZZVm",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 16, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9129),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user2",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User Two",
                            Password = "$2a$11$PW7Dapz13EKI/xGqXjK.Y.DJgkGU39nz79UQyUr6bc4I1UNoUJCey",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 16, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9135),
                            Role = "User"
                        },
                        new
                        {
                            Login = "user3",
                            AvatarImage = "00000000-0000-0000-0000-000000000000",
                            Nickname = "User Three",
                            Password = "$2a$11$ACFe85jXeKSHr7m3uycOsu4QN9/FbLb/YgTQ/v7UlR22DvoSX5gbW",
                            Refresh = "42af99f8-7c91-4fdb-8b72-0e12b7e6b74b",
                            RefreshExpire = new DateTime(2024, 8, 16, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9140),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OwnerLogin")
                        .IsRequired()
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerLogin");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ffada79-a804-486b-bdb2-07d5d06c059a"),
                            DateTime = new DateTime(2024, 7, 17, 4, 56, 49, 752, DateTimeKind.Utc).AddTicks(9489),
                            Description = "Sample verification request description 1",
                            EventName = "Sample Event 1",
                            OwnerLogin = "user1",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("204c2e0e-d8e0-4b14-b28a-45ef4a3c6795"),
                            DateTime = new DateTime(2024, 7, 17, 2, 56, 49, 752, DateTimeKind.Utc).AddTicks(9514),
                            Description = "Sample verification request description 2",
                            EventName = "Sample Event 2",
                            OwnerLogin = "user2",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("e64d7198-8edd-4631-8513-e21cb880267f"),
                            DateTime = new DateTime(2024, 7, 17, 0, 56, 49, 752, DateTimeKind.Utc).AddTicks(9520),
                            Description = "Sample verification request description 3",
                            EventName = "Sample Event 3",
                            OwnerLogin = "user2",
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("2a027747-8613-4970-81f4-ceca937824d7"),
                            DateTime = new DateTime(2024, 7, 17, 0, 56, 49, 752, DateTimeKind.Utc).AddTicks(9525),
                            Description = "Sample verification request description 4",
                            EventName = "Sample Event 4",
                            OwnerLogin = "user3",
                            Status = "InProgress"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Activity", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.Image", b =>
                {
                    b.HasOne("DataAccess.Models.VerificationRequest", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccess.Models.VerificationRequest", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
